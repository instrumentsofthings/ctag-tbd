#include "ctagSoundProcessorMoogFilt1.hpp"
#include <iostream>
#include "helpers/ctagFastMath.hpp"

#define SAMPLE_RATE 44100.0

using namespace CTAG::SP;

ctagSoundProcessorMoogFilt1::ctagSoundProcessorMoogFilt1() : thermal(0.000025) {
    setIsStereo();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    model->LoadPreset(0);

	memset(stage, 0, sizeof(stage));
	memset(delay, 0, sizeof(delay));
	memset(stageTanh, 0, sizeof(stageTanh));
}

void ctagSoundProcessorMoogFilt1::Process(const ProcessData &data) {
	float fCutoff = static_cast<float>(cutoff); 
	float fResonance = static_cast<float>(resonance) / 4095.f;

	// process cv / pot data
	if (cv_cutoff != -1)
	{
		if (data.cv[cv_cutoff] < 0.f)
			fCutoff = 0.f;
		else
			fCutoff = data.cv[cv_cutoff] * 16000.f; 
	}
	if (cv_resonance != -1)
	{
		if (data.cv[cv_resonance] < 0.f)
			fResonance = 0.f;
		else
			fResonance = data.cv[cv_resonance];
	}

	// process cutoff frequency
	float fc =  fCutoff / SAMPLE_RATE;
	float f  =  fc * 0.5; // oversampled 
	float fc2 = fc * fc;
	float fc3 = fc * fc * fc;

	float fcr = 1.8730 * fc3 + 0.4955 * fc2 - 0.6490 * fc + 0.9988;
	acr = -3.9364 * fc2 + 1.8409 * fc + 0.9968;

	tune = (1.0 - exp(-((2 * M_PI) * f * fcr))) / thermal; 

	// process resonance
	resQuad = 4.0 * fResonance * acr;

	for (int s = 0; s < this->bufSz; ++s)
		{
			// Oversample
			for (int j = 0; j < 2; j++) 
			{
				float input = data.buf[s * 2 + this->processCh] - resQuad * delay[5];
				delay[0] = stage[0] = delay[0] + tune * (CTAG::SP::HELPERS::fasttanh(input * thermal) - stageTanh[0]);
				for (int k = 1; k < 4; k++) 
				{
					input = stage[k-1];
					stage[k] = delay[k] + tune * ((stageTanh[k-1] = CTAG::SP::HELPERS::fasttanh(input * thermal)) - (k != 3 ? stageTanh[k] : CTAG::SP::HELPERS::fasttanh(delay[k] * thermal)));
					delay[k] = stage[k];
				}
				// 0.5 sample delay for phase compensation
				delay[5] = (stage[3] + delay[4]) * 0.5;
				delay[4] = stage[3];
			}
			data.buf[s * 2 + this->processCh] = delay[5];
		}
}

ctagSoundProcessorMoogFilt1::~ctagSoundProcessorMoogFilt1() {
}

const char *ctagSoundProcessorMoogFilt1::GetCStrID() const {
    return id.c_str();
}


void ctagSoundProcessorMoogFilt1::setParamValueInternal(const string& id, const string& key, const int val) {
// autogenerated code here
// sectionCpp0
if(id.compare("cutoff") == 0){
	if(key.compare("current") == 0){
		cutoff = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_cutoff = val;
	}
	return;
}
if(id.compare("resonance") == 0){
	if(key.compare("current") == 0){
		resonance = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_resonance = val;
	}
	return;
}
// sectionCpp0
}

void ctagSoundProcessorMoogFilt1::loadPresetInternal() {
// autogenerated code here
// sectionCpp1
cutoff = model->GetParamValue("cutoff", "current");
cv_cutoff = model->GetParamValue("cutoff", "cv");
resonance = model->GetParamValue("resonance", "current");
cv_resonance = model->GetParamValue("resonance", "cv");
// sectionCpp1
}
